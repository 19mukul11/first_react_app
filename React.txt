**** REACT BASICS ******

ReactJS  is a library of Javascript. Used for developing efficient and fast UI.
Single Page Applications.

Developed and maintained by Facebook.


********* CREATE FIRST REACT APP *****************

CMD to create a new  react App      :  npx  create-react-app  my-app
CMD to run app                      :  npm start
Custom cmd to run                   :  change in package.json   
                                       npm run my-app

1) PROJECT DIRECTORY STRUCTURE
````````````````````````````````
    package.json  :- It is the main configuration file of the app. Contains the info of application and all packages. Most imp file of project.
    It conatins all details of project, versions, dependencies etc.

    package-lock.json :- It is a description file Contains info of all the packages of node modules folder in a tree STRUCTURE. Contains version history and dependencies of all the used packages.

    .gitignore :- File related with git. It actually tells the GIT to ignore these specified files and folders  during commit.

    src :- Main folder of tha app which contains the source code of app.

    src/App.js :- File representing the app. A pre deault made component.

    src/App.test.js :- USed for writing unit test cases. testing purpose.

    src/index.js :- The most imp file of react app. It is actually the entry point of react app. It is the first file which runs on start.

    public :- Folder not related with react. mainly HTML content. Generally used for serving Static content ex. images media file etc.

    public/index.html :- It is the by default web page of react shown.
                        In it, there is a div with id='root'.
                        React injects the dynamic content inside this root only.

    node_modules :- It is the folder in which all the installed modules and packages are located.


2) COMPONENTS 
`````````````` 
    In REACT, a component is basically a JS function which returns some HTML code. It represents a Component of a web page.
    It is an independent piece of code that is defined once , and can be reused again and again.
    Its name should always start with Capital letter. It also has its state.
    return statement is must.

    Basic Example : Defining a header component and using it in app.

    Components/Header.js
       
        export function Header(){
            return (<h1> THIS IS HEADER </h1>);
        }

    App.js

        import Header from './Components/Header'

        function App(){
            return(<div>
                <Header />      //rendering a component
                <p>
                    Some content
                </p>
            </div>);
        }

    index.js 

        const root = ReactDOM.createRoot(document.getElementById('root'));
        root.render(
            <React.StrictMode>
                <App />
            </React.StrictMode>
        );
 
    TYPES OF COMPONENTS
    ```````````````````
    Functional component :- A component defined by using a function.
                            Ex. 

                            function Header(){
                                return(
                                    <h1> HEADER </h1>
                                );
                            }
                            export default Header;    
                                 or   
                                 export {Header, AdminHeader, UserHeader}   to export multiple Components

    Class component :- A component defined by using Class.
                        Ex. 

                        import React from 'react';

                        class Footer extends React.Component{
                            render(){
                                return(
                                    <h1> THIS IS FOOTER </h1>
                                );
                            }
                        }

3) JSX (Javascript XML)
````````````````````````
    Its a powerfull syntax, which allows us to write HTML code in React with easy way.
    Without it we will have to do very tedious work Ex. 

        function Header(){
            return (
                React.createElement(h1,null, 'HEADER COMPONENT')
            );
        } 

        By using JSX, we not need to to above stuff.

         function Header(){
            return (
               <h1> HEADER COMPONENT</h1>
            );
        } 

        Rendering a component by JSX :- 

            root.render(
                <Header />
            );

    Displaying data in JSX : 

        function AdminHeader(){
            const admin = {
                name : "Mukul Mahajan",
                id : 1911, 
            }

            return(
                <div id="header">
                    <h2> THIS IS ADMIN HEADER </h2>
                    <h5>Admin {admin.id} : {admin.name}</h5>
                </div>
            );
        }

    Conditional Rendering in JSX : 
                                    let content;
                                    if (isLoggedIn) {
                                        content = <AdminPanel />;
                                    } else {
                                        content = <LoginForm />;
                                    }

                                    return (
                                        <div>
                                            {content}
                                        </div>
                                    );

4) Working of ReactJS
```````````````````````
    Whenever we perform any changes in the elements of DOM on any event, ideally entire DOM gets updated and is 
    rendered again. But, it is a very costly operation if we do it again and again. Here, React comes in picture.
    React maintains a lightweight version of actual(real) DOM called as Virtual DOM.
    So, when changes are made to the UI, they are first applied to the virtual DOM. React then calculates the most efficient
    way to update the actual DOM and applies only the necessary changes.

    Reconciliation :- React's diffing algorithm, called reconciliation, is responsible for efficiently updating the DOM.
    When, state of an element changes in the DOM, react first creates a new virtual DOM with the updated state of the respective 
    elements. Then it compares it with the previous virtual DOM, to find out the differences between them. 
    After, it is known to React about what portion has been changed, it applies just those specific changes to the Real DOM
    without re-rendering the entire document.


5) State in ReactJS
````````````````````
    A state is basically an object, which stores some data or informtion about the component. In layman terms, it represents the current
    condition of the component. Its just like a simple object holding some data, which can be updated in response to event handlers,
    server responses, prop changes or some programming logics.
    Whenever, the state of a component is changed/updated React re-renders the component on browser, which helps in creating dynamic 
    and interactive user interfaces.

    State is immutable. When the state object is updated, the changes are not done in the actual state object, inplace a new copy of state is initialised
    with the updated state values and it replaces the old object.

    State has to be first initialised, and then later on updated accordingly for a specific component. State can be used in both the ways :-

    (i) State in Functional Component :- useState hook is used to initialise a state in Functional component. It returns an array with
                                        two elements: the current state value and a function to update it.

        function Content(){
            let [data, setState] = useState("Hello I am Java Dev!");   // STATE INITIALISATION
    
            function update(){
                setState("Start ReactJS");     // UPDATING STATE
            }

            return (
                <div>
                    <h1>{data}</h1>
                    <br />
                    <button onClick={update}>
                        Click Me
                    </button>
                </div>
            );
        }

            Counter Example:

                let [data, setState] = useState(1);
        
                function update(){
                    setState(data+1);
                }

            Object example : 

                let [data, setState] = useState({
                                                id: 12712,
                                                name: "mukul",
                                                company: "Internshala",
                                                ctc : 5.4,
                                            });
            
                function update(){
                    const obj = {
                        id: 754,
                        name: "virat kohli",
                        company: "Entigrity",
                        ctc : 7.2,
                    };
                    setState(obj);
                }





    

